PORT=5000
MONGO_URI=mongodb://localhost:27017/Gallery
BASE_URL=http://localhost:5173
















import React, { useState, useEffect } from "react";
import LightGallery from "lightgallery/react";
import "lightgallery/css/lightgallery.css";
import "lightgallery/css/lg-zoom.css";
import "lightgallery/css/lg-thumbnail.css";
import lgZoom from "lightgallery/plugins/zoom";
import lgThumbnail from "lightgallery/plugins/thumbnail";
import { motion } from "framer-motion";
import axios from "axios";

const container = {
  hidden: { opacity: 1, scale: 0.98 },
  visible: {
    opacity: 1,
    scale: 1,
    transition: {
      delayChildren: 0.2,
      staggerChildren: 0.15,
    },
  },
};

const item = {
  hidden: { opacity: 0, y: 30 },
  visible: { opacity: 1, y: 0 },
};

const Presentations = () => {
  const [galleryItems, setGalleryItems] = useState([]);
  const [visibleSections, setVisibleSections] = useState(2);

  useEffect(() => {
    const fetchGallery = async () => {
      try {
        const res = await axios.get(`${import.meta.env.VITE_API_BASE_URL}/gallery`);
        setGalleryItems(res.data);
      } catch (err) {
        console.error("Error fetching gallery:", err);
      }
    };

    fetchGallery();
  }, []);

  const handleLoadMore = () => {
    setVisibleSections((prev) =>
      Math.min(prev + 1, galleryItems.length)
    );
  };

  return (
    <div className="max-w-7xl mx-auto px-4 py-12">
      <motion.div variants={container} initial="hidden" animate="visible">
        <h2 className="text-4xl font-bold text-center mb-10">
          Our Presentations
        </h2>

        {galleryItems.slice(0, visibleSections).map((section, idx) => (
          <div key={section._id || idx} className="mb-12">
            <h3 className="text-2xl font-semibold mb-6 text-gray-700 border-b pb-2">
              {section.title}
            </h3>

            <LightGallery
              speed={500}
              plugins={[lgZoom, lgThumbnail]}
              elementClassNames="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6"
            >
              {section.images.map((image, i) => (
                <motion.a
                  key={i}
                  href={`http://localhost:5000${image.imageUrl}`}
                  variants={item}
                  className="group relative block rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-shadow duration-300"
                >
                  <div className="aspect-w-16 aspect-h-9">
                    <img
                      src={`http://localhost:5000${image.imageUrl}`}
                      alt={image.imageHeading}
                      className="w-full h-64 object-cover transition-transform duration-300 group-hover:scale-105"
                    />
                  </div>
                  <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-black/30 to-transparent flex items-end p-4">
                    <h4
                      className="text-white font-medium text-lg"
                      title={image.imageHeading}
                    >
                      {image.imageHeading.length > 24
                        ? `${image.imageHeading.slice(0, 24)}...`
                        : image.imageHeading}
                    </h4>
                  </div>
                  <div className="absolute top-4 right-4 bg-white/90 text-black px-2 py-1 rounded text-xs font-medium">
                    View
                  </div>
                </motion.a>
              ))}
            </LightGallery>
          </div>
        ))}

        {visibleSections < galleryItems.length && (
          <div className="text-center mt-8">
            <button
              onClick={handleLoadMore}
              className="px-6 py-2 bg-red-600 text-white font-medium rounded hover:bg-red-700 transition"
            >
              Load More
            </button>
          </div>
        )}
      </motion.div>
    </div>
  );
};

export default Presentations;

